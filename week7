class Vertex:

    def __init__(self, node):
        self.node = node
        self.neighbours = []

class Graph:

    def __init__(self):
        self.dictionary = {}

    def add_vertex(self, vertex):
        self.vertex = vertex
        newVertex = Vertex(vertex)
        self.dictionary[vertex] = []
        return newVertex

    def add_edge(self, vertex1, vertex2):
        self.dictionary[vertex1].append(vertex2)
        self.dictionary[vertex2].append(vertex1)

    def get_vertex(self, n):
        if n in self.dictionary:
            return self.dictionary[n]
        else:
            return None

    def get_vertices(self):
        return self.dictionary.keys()

    def get_dictionary(self):
        print (self.dictionary.keys(),"\n", self.dictionary.values(),"\n", self.dictionary.items())
        return self.dictionary.items()

    def Breadth(graph, vertex):
        q = []
        visited = []
        q.insert(0, vertex)
        while len(q) > 0:
            #print ("q: ", q,"visited :", visited)
            current = q.pop(0)
            if current not in visited:
                visited.append(current)
            for node in g.get_vertex(current):
                if node not in visited:
                    q.insert(0, node)
        print (visited)
        return visited                 
                                 
"""
    def Depth(graph, vertex):
        stack = []
        visited = []
        s.append(vertex)
        while len(stack) > 0:
            current = stack.pop()
            if current not in visited:
                visited.append(current)
            #For all edges, e, from current, stack.append(e.to)
        return visited
        
    def Breadth(graph, vertex):
        q = []
        visited = []
        q.insert(0, vertex)
        while len(q) > 0:
            current = q.pop()
            if current not in visited:
                visited.append(current)
            #For all edges, e, from current   
                q.insert(0, x)
        return visited
"""
                      
if __name__ == "__main__":
    
    g = Graph()

    g.add_vertex("a")
    g.add_vertex("b")
    g.add_vertex("c")
    g.add_vertex("d")
    g.add_vertex("e")
    g.add_vertex("f")

    g.add_edge("a", "b")  
    g.add_edge("a", "f")
    g.add_edge("e", "d")
    g.add_edge("b", "c")
    g.add_edge("b", "d")
    g.add_edge("d", "c")
    g.add_edge("e", "f")
    g.add_edge("f", "c")


    #g.get_dictionary()

    #g.get_vertex("e")

    g.Breadth("e")

    #g.Depth("a")
