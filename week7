class Queue:
    #made for practice and easier spelling
    
    def __init__ (self):
        self.items = []

    def up(self, item):
        self.items.insert(0, item)

    def down(self):
        return self.items.pop()

class Vertex:

    def __init__(self, node):
        self.node = node
        self.neighbours = []

    #bounds the vertices that are adjecent
    def add_neighbour(self, node):
        return self.neighbours.append(node)

class Graph:

    def __init__(self):
        self.dictionary = {}
        self.vertices = 0
        #counts the number of vertices

    def add_vertex(self, vertex):
        self.vertex = vertex
        self.vertices = self.vertices + 1
        newVertex = Vertex(vertex)
        self.dictionary[vertex] = newVertex
        return newVertex

    def add_edge(self, vertex1, vertex2):
        self.dictionary[vertex1].add_neighbour(self.dictionary[vertex2])
        self.dictionary[vertex2].add_neighbour(self.dictionary[vertex1])

    def Depth(graph, vertex):
        stack = []
        visited = []
        s.append(vertex)
        while len(stack) > 0:
            current = stack.pop()
            if current not in visited:
                visited.append(current)
            #For all edges, e, from current, stack.append(e.to)
        return visited
        
    def Breadth(graph, vertex):
        q = Queue()
        visited = []
        q.up(vertex)
        while len(q) > 0:
            current = q.down()
            if current not in visited:
                visited.append(current)
            #For all edges, e, from current   
                q.up(x)
        return visited

if __name__ == "__main__":
    
    g = Graph()

    g.add_vertex("a")
    g.add_vertex("b")
    g.add_vertex("c")
    g.add_vertex("d")
    g.add_vertex("e")
    g.add_vertex("f")

    g.add_edge("a", "b")  
    g.add_edge("a", "f")
    g.add_edge("e", "d")
    g.add_edge("b", "c")
    g.add_edge("b", "d")
    g.add_edge("d", "c")
    g.add_edge("e", "f")
    g.add_edge("f", "c")

    g.Depth("a")
    g.Breadth("e")
    
    
