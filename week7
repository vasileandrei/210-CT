class Vertex:

    def __init__(self, vertex):
        self.node = vertex
        self.neighbours = []

class Graph:

    def __init__(self):
        self.dictionary = {}

    def add_vertex(self, vertex):
        newVertex = Vertex(vertex)
        self.dictionary[vertex] = []
        return newVertex

    def add_edge(self, vertex1, vertex2):
        self.dictionary[vertex1].append(vertex2)
        self.dictionary[vertex2].append(vertex1)

    def get_vertex(self, n):
        if n in self.dictionary:
            return self.dictionary[n]
        else:
            return None

    def get_vertices(self):
        return self.dictionary.keys()

    def get_dictionary(self):
        return self.dictionary.items()

    def Breadth(graph, vertex):
        queue = []
        visited = []
        queue.insert(0, vertex)
        while len(queue) > 0:
            current = queue.pop(0)
            if current not in visited:
                visited.append(current)
            for node in g.get_vertex(current):
                if node not in visited:
                    queue.insert(0, node)
        print ("BFS :", visited)
        return visited

    def Depth(graph, vertex):
        stack = []
        visited = []
        stack.append(vertex)
        while len(stack) > 0:
            current = stack.pop()
            if current not in visited:
                visited.append(current)
            for node in g.get_vertex(current):
                if node not in visited:
                    stack.append(node)
        print ("DFS :", visited)
        return visited

if __name__ == "__main__":
    
    g = Graph()

    g.add_vertex("a")
    g.add_vertex("b")
    g.add_vertex("c")
    g.add_vertex("d")
    g.add_vertex("e")
    g.add_vertex("f")

    g.add_edge("a", "b")  
    g.add_edge("a", "f")
    g.add_edge("e", "d")
    g.add_edge("b", "c")
    g.add_edge("b", "d")
    g.add_edge("d", "c")
    g.add_edge("e", "f")
    g.add_edge("f", "c")

    g.Breadth("e")
    g.Depth("a")
