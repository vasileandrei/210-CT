"""
On this task I created a graph data structure, which contains two classe: vertex and graph
Each class has its own attributes and funtions.
After the creation of the data structure, I the following two algorithms:
Bradth-First and Depth-First.


                         //GRAPH\\
                         
                             2
                 ---(B)-------------(C)---
          2 ____/    | \     4       |    \____ 1
       ____/       2 |  -----------  | 3       \____
      /              |       4     \ |      6       \
    (A)             (D)-------------(E)-------------(H)
      \____          |       3     / |         
           \____   3 |  -----------  | 7   
          1     \    | /     5       |        
                 ---(F)-------------(G)
                 
"""

class Vertex:

    def __init__(self, vertex):
        self.node = vertex
        self.neighbours = []
        #neighbours (also the value for the dictionary), are stored as a list

class Graph:

    def __init__(self):
        self.dictionary = {}
        #dictionary, containing Key:Value pairs, Key is Node, Value are the neighbours

    def add_vertex(self, vertex):
        newVertex = Vertex(vertex)
        self.dictionary[vertex] = []
        return newVertex

    def add_edge(self, vertex1, vertex2):
        self.dictionary[vertex1].append(vertex2)
        self.dictionary[vertex2].append(vertex1)

    #gets the neighbours of that vertex
    def get_vertex(self, n):
        if n in self.dictionary:
            return self.dictionary[n]
        else:
            return None

    def get_vertices(self):
        return self.dictionary.keys()

    def get_dictionary(self):
        return self.dictionary.items()

    def Breadth(graph, vertex):
        queue = []
        visited = []
        queue.insert(0, vertex)
        while len(queue) > 0:
            current = queue.pop()
            if current not in visited:
                visited.append(current)
                for node in g.get_vertex(current):
                    if node not in visited:
                        queue.insert(0, node)
        print ("BFS :", visited)
        return visited

    def Depth(graph, vertex):
        stack = []
        visited = []
        stack.append(vertex)
        while len(stack) > 0:
            current = stack.pop()
            if current not in visited:
                visited.append(current)
                for node in g.get_vertex(current):
                    if node not in visited:
                        stack.append(node)
        print ("DFS :", visited)
        return visited

if __name__ == "__main__":
    
    g = Graph()


    g.add_vertex("a")
    g.add_vertex("b")
    g.add_vertex("c")
    g.add_vertex("d")
    g.add_vertex("e")
    g.add_vertex("f")
    g.add_vertex("g")
    g.add_vertex("h")

    g.add_edge("a", "b")
    g.add_edge("a", "f")
    g.add_edge("b", "d")
    g.add_edge("b", "e")
    g.add_edge("b", "c")
    g.add_edge("d", "e")
    g.add_edge("d", "f")
    g.add_edge("f", "e")
    g.add_edge("f", "g")
    g.add_edge("c", "e")
    g.add_edge("c", "h")
    g.add_edge("g", "e")
    g.add_edge("e", "h")

    g.Breadth("a")
    
    g.Depth("a")
