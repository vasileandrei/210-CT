class Vertex:

    def __init__(self, vertex):
        self.vertex = vertex
        self.neighbours = {}
        self.distance = 0
        self.previous = None

    def add_neighbour(self, vertex, weight=0):
        self.neighbours[vertex] = weight

    def get_weight(self, vertex):
        return self.neighbours[vertex]

    def get_neighbours(self):
        return self.neighbours.keys()

    def set_distance(self, distance):
        self.distance = distance

    def get_distance(self):
        return self.distance

    def set_previous(self, previous):
        self.previous = previous

    def get_previous(self):
        return self.previous

    #def __str__(self):
        #return "Vertex " + (self.vertex) + " has the neighbours " + str([x.vertex for x in self.neighbours]) #+ str([self.vertex[x] for x in self.neighbours])

class Graph:

    def __init__(self):
        self.dictionary = {}

    def add_vertex(self, vertex):
        newVertex = Vertex(vertex)
        self.dictionary[vertex] = Vertex(vertex)
        return newVertex

    def add_edge(self, vertex1, vertex2, cost):
        self.dictionary[vertex1].add_neighbour(self.dictionary[vertex2], cost)
        self.dictionary[vertex2].add_neighbour(self.dictionary[vertex1], cost)
        
    def get_vertex(self, vertex):
        if vertex in self.dictionary:
            print (self.dictionary[vertex])
            return self.dictionary[vertex]
        else:
            return None

    def get_vertices(self):
        return self.dictionary.keys()

    def get_dictionary(self):
        print (self.dictionary.items())
        return self.dictionary.items()

    def get_weight(self, vertex):
        if vertex in self.dictionary:
            print (self.dictionary[vertex].neighbours.values())
            return (self.dictionary[vertex].neighbours.values())
        else:
            return None

    def get_neighbour(self, vertex):
        lst = []
        for x in self.dictionary[vertex].neighbours:
            lst.append(x.vertex)
        else:
            return None
        return lst

    def test(self, current):
        for node in g.dictionary[current].get_neighbours():
            print (node.vertex, " : ", node.distance)
    
    def Dijkstra(g, start, end):
        
        ### tentativeWeight = distance ## get_distance or set_distance(distance), inside VERTEX class
        ### weight = weight of an edge, between two vertices

        ### distance is an attribute to the class Vertex
        ### weight is the cost from a vertex to another, getting it by the function get_weight(vertex), inside VERTEX class

        ### neighbours to the current node can be ound by accessing the function get_neighbour(vertex), inside GRAPH class

        ### all vertices in the graph can be acceses by the function get_vertices(), inside GRAPH class
        
        current = start
        for n in g.get_vertices():
            g.dictionary[n].set_distance(float("inf"))
        g.dictionary[start].set_distance(0)
        visited = []
        path = []
        path.append(current)
        while current != end:
            for node in g.dictionary[current].get_neighbours():
                #print (node.vertex, ";vertex tw :", g.dictionary[current].get_distance(), ";weight :", g.dictionary[current].get_weight(node), ";neighbour tw :", node.distance)
                if g.dictionary[current].get_distance() + g.dictionary[current].get_weight(node) < node.distance :
                    node.set_distance(g.dictionary[current].get_distance() + g.dictionary[current].neighbours[node])
                    node.set_previous(current)
                    path.append(node.vertex)
            visited.append(current)
            minn = float("inf")
            for n in g.dictionary[current].get_neighbours():
                #print (n.vertex)
                if n not in visited and n.distance < minn:
                    current = n.vertex
                    minn = n.distance
                    #print (current, minn)
            
            print (visited, path)
        return visited
if __name__ == "__main__":
    
    g = Graph()

    g.add_vertex("a")
    g.add_vertex("b")
    g.add_vertex("c")
    g.add_vertex("d")
    g.add_vertex("e")
    g.add_vertex("f")
    g.add_vertex("g")
    g.add_vertex("h")

    g.add_edge("a", "b", 2)
    g.add_edge("a", "f", 1)
    g.add_edge("b", "d", 2)
    g.add_edge("b", "e", 4)
    g.add_edge("b", "c", 2)
    g.add_edge("d", "e", 4)
    g.add_edge("d", "f", 3)
    g.add_edge("f", "e", 3)
    g.add_edge("f", "g", 5)
    g.add_edge("c", "e", 3)
    g.add_edge("c", "h", 1)
    g.add_edge("g", "e", 7)
    g.add_edge("e", "h", 6)

    #g.get_vertex("a")

    g.Dijkstra("a", "h")

    #g.get_vertices()

    #g.get_dictionary()

    #g.get_weight("a")

    #g.get_neighbour("e")

    #g.test("a")
 
