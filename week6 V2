class Stack:
    def __init__(self):
        self.item = []
    def emtpy(self):
        return self.item == []
    def push(self, item):
        return self.item.append(item)
    def pop(self):
        return self.item.pop()
    def peek(self):
        return self.item[len(self.item)-1]
    def size(self):
        return len(self.item)

class BinTreeNode(object):
    def __init__(self, value):
        self.value=value
        self.left=None
        self.right=None
     
def tree_insert(tree, item):
    if tree==None:
        tree=BinTreeNode(item)
    else:
        if(item < tree.value):
            if(tree.left==None):
                tree.left=BinTreeNode(item)
            else:
                tree_insert(tree.left,item)
        else:
            if(tree.right==None):
                tree.right=BinTreeNode(item)
            else:
                tree_insert(tree.right,item)
    return tree

def postorder(tree):
    if(tree.left!=None):
        postorder(tree.left)
    if(tree.right!=None):
        postorder(tree.right)
    print (tree.value)
"""
def in_order(tree):
    if(tree.left!=None):
        in_order(tree.left)
    print (tree.value)
    if(tree.right!=None):
        in_order(tree.right)
"""
def in_order(tree):
    stack = Stack()
    current = t
    condition = False
    while condition:
        if current is not None:
            stack.push(current)
            current = current.left
        else:
            if len(stack) > 0:
                current = stack.pop()
                print (current.value)
                current = current.right
            else:
                condition = True
               
def preorder(tree):
    print (tree.value)
    if tree.left != None:
        preorder(tree.left)
    if tree.right != None:
        preorder(tree.right)

if __name__ == '__main__':
    
  t=tree_insert(None,6);
  tree_insert(t,10)
  tree_insert(t,5)
  tree_insert(t,2)
  tree_insert(t,3)
  tree_insert(t,4)
  tree_insert(t,11)
  in_order(t)
