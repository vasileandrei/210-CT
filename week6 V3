"""
   This program creates a binary tree, inserting items. 
   The display methods are several: postorder, inorder, preorder. 
   The function in_order has been created iteratively, 
   performing the same task as the recursive one.
"""

class BinTreeNode(object):
    def __init__(self, value):
        self.value=value
        self.left=None
        self.right=None
     
def tree_insert(tree, item):
    if tree==None:
        tree=BinTreeNode(item)
    else:
        if(item < tree.value):
            if(tree.left==None):
                tree.left=BinTreeNode(item)
            else:
                tree_insert(tree.left,item)
        else:
            if(tree.right==None):
                tree.right=BinTreeNode(item)
            else:
                tree_insert(tree.right,item)
    return tree

def postorder(tree):
    if(tree.left!=None):
        postorder(tree.left)
    if(tree.right!=None):
        postorder(tree.right)
    print (tree.value)
"""
def in_order(tree):
    if(tree.left!=None):
        in_order(tree.left)
    print (tree.value)
    if(tree.right!=None):
        in_order(tree.right)
"""
def in_order(tree):
    #create a stack, set condition to True
    stack = []
    condition = True
    while condition:
        if tree is not None:
            stack.append(tree)
            tree = tree.left
            #stack values, goes to the most left value in the tree
            #the most left value, becomes a parent for nodes
        else:
            if len(stack) > 0:
                tree = stack.pop()
                print (tree.value)
                tree = tree.right
                #removes last value, prints and moves to the right
            else:
                condition = False
                #break the loop

#added the simple preorder recursive function               
def preorder(tree):
    print (tree.value)
    if tree.left != None:
        preorder(tree.left)
    if tree.right != None:
        preorder(tree.right)

if __name__ == '__main__':
    
  t=tree_insert(None,6);
  tree_insert(t,10)
  tree_insert(t,5)
  tree_insert(t,2)
  tree_insert(t,3)
  tree_insert(t,4)
  tree_insert(t,11)
  in_order(t)
