class Vertex:

    def __init__(self, vertex):
        self.vertex = vertex
        self.neighbours = {}

    def add_neighbour(self, vertex, weight=0):
        self.neighbours[vertex] = weight

    def get_weight(self, vertex):
        return self.neighbours[vertex]

class Graph:

    def __init__(self):
        self.dictionary = {}

    def add_vertex(self, vertex):
        newVertex = Vertex(vertex)
        self.dictionary[vertex] = newVertex
        return newVertex

    def add_edge(self, vertex1, vertex2, cost):
        
        self.dictionary[vertex1].add_neighbour(self.dictionary[vertex2], cost)
        self.dictionary[vertex2].add_neighbour(self.dictionary[vertex1], cost)
        
    def get_vertex(self, n):
        if n in self.dictionary:
            return self.dictionary[n]
        else:
            return None

    def get_vertices(self):
        return self.dictionary.keys()

    def get_dictionary(self):
        return self.dictionary.items()

if __name__ == "__main__":
    
    g = Graph()

    g.add_vertex("a")
    g.add_vertex("b")
    g.add_vertex("c")
    g.add_vertex("d")
    g.add_vertex("e")
    g.add_vertex("f")
    g.add_vertex("g")
    g.add_vertex("h")

    g.add_edge("a", "b", 2)
    g.add_edge("a", "f", 1)
    g.add_edge("b", "d", 2)
    g.add_edge("b", "e", 4)
    g.add_edge("b", "c", 2)
    g.add_edge("d", "e", 4)
    g.add_edge("d", "f", 3)
    g.add_edge("f", "e", 3)
    g.add_edge("f", "g", 5)
    g.add_edge("c", "e", 3)
    g.add_edge("c", "h", 1)
    g.add_edge("g", "e", 7)
    g.add_edge("e", "h", 6)
