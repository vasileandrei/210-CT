class Vertex:

    def __init__(self, vertex):
        self.vertex = vertex
        self.neighbours = {}
        self.distance = 0
        self.previous = None
        self.cost = float("inf")

    def add_neighbour(self, vertex, weight=0):
        self.neighbours[vertex] = weight

    def get_weight(self, vertex):
        return self.neighbours[vertex]

    def get_neighbours(self):
        return self.neighbours.items()

    def set_distance(self, distance):
        self.distance = distance

    def get_distance(self):
        return self.distance

    def set_previous(self, previous):
        self.previous = previous

    def get_previous(self):
        return self.previous

    def __str__(self):
        return "Vertex " + (self.vertex) + " has the neighbours " + str([x.vertex for x in self.neighbours]) #+ str([self.vertex[x] for x in self.neighbours])

class Graph:

    def __init__(self):
        self.dictionary = {}

    def add_vertex(self, vertex):
        newVertex = Vertex(vertex)
        self.dictionary[vertex] = newVertex
        return newVertex

    def add_edge(self, vertex1, vertex2, cost):
        self.dictionary[vertex1].add_neighbour(self.dictionary[vertex2], cost)
        self.dictionary[vertex2].add_neighbour(self.dictionary[vertex1], cost)
        
    def get_vertex(self, n):
        if n in self.dictionary:
            print (self.dictionary[n])
            return self.dictionary[n]
        else:
            return None

    def get_vertices(self):
        return self.dictionary.keys()

    def get_dictionary(self):
        return self.dictionary.items()

    def Dijkstra(g, start, end):
        current = start
        for n in g.get_vertices():
            n.set_distance(float("inf"))
        start.set_distance = 0
        visited = []
        while current != end:
            for node in g.get_vertex(current):
                if current.get_distance + current[node].get_weight < node.get_distance:
                    u.cost = current.get_distance + current[node].get_weight
                    node.previous = current
            visited.append(current)
            minn = float("inf")
            for n in current.get_vertices():
                if n not in visited and n.get_distance<minn:
                    current = n
                    minn = n.get_distance
        
"""
    def Dijkstra(g, start, end):
        curent = start
        for all n in g.get_vertices():
            n.tw = infinite
        start.tw = 0
        visited = []
        while current != end:
            for all vertices, u, adjecent to v:
                if current.tw + current[u].w < u.tw:
                    u.tw = current.tw + current[u].w
                    u.pre = current
            visited.append(current)
            min = infinite
            for all nodes n in current:
                in n not in visited and n.tw < min:
                    current = n
                    min = n.tw
"""

if __name__ == "__main__":
    
    g = Graph()

    g.add_vertex("a")
    g.add_vertex("b")
    g.add_vertex("c")
    g.add_vertex("d")
    g.add_vertex("e")
    g.add_vertex("f")
    g.add_vertex("g")
    g.add_vertex("h")

    g.add_edge("a", "b", 2)
    g.add_edge("a", "f", 1)
    g.add_edge("b", "d", 2)
    g.add_edge("b", "e", 4)
    g.add_edge("b", "c", 2)
    g.add_edge("d", "e", 4)
    g.add_edge("d", "f", 3)
    g.add_edge("f", "e", 3)
    g.add_edge("f", "g", 5)
    g.add_edge("c", "e", 3)
    g.add_edge("c", "h", 1)
    g.add_edge("g", "e", 7)
    g.add_edge("e", "h", 6)

    g.get_vertex("e")

    #g.Dijkstra("a", "h")

    #g.get_vertices()
   
