#include <iostream>

class BinTreeNode(object):

    def __init__(self, value):
        self.value=value
        self.left=None
        self.right=None


def tree_insert(tree, item):
    if tree==None:
        tree=BinTreeNode(item)
    else:
        if(item < tree.value):
            if(tree.left==None):
                tree.left=BinTreeNode(item)
            else:
                tree_insert(tree.left,item)
        elif(item > tree.value):
            if(tree.right==None):
                tree.right=BinTreeNode(item)
            else:
                tree_insert(tree.right,item)
    return tree

def postorder(tree):
    if(tree.left!=None):
        postorder(tree.left)
    if(tree.right!=None):
        postorder(tree.right)
    print (tree.value)

def preorder(tree):
    print (tree.value)
    if tree.left != None:
        preorder(tree.left)
    if tree.right != None:
        preorder(tree.right)

def in_order(tree):
    if(tree.left!=None):
        in_order(tree.left)
    print (tree.value)
    if(tree.right!=None):
        in_order(tree.right)
'''
def in_order(tree):
    finalList = []
    for x in lstOfNodes:
        if x in finalList:
            continue
        else:
            finalList.append(x)
    for i in range(len(finalList)):
        key = finalList[i]
        j = i
        while j>0 and finalList[j-1]>key:
            finalList[j] = finalList[j-1]
            j = j - 1
        finalList[j] = key
    print (finalList)
'''
if __name__ == '__main__':
    
  t=tree_insert(None,6);
  tree_insert(t,10)
  tree_insert(t,5)
  tree_insert(t,2)
  tree_insert(t,3)
  tree_insert(t,4)
  tree_insert(t,11)
  in_order(t)
